Index: Mapa.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import math\r\n\r\nimport numpy as np\r\n\r\n\r\nclass Mapa:\r\n    def __init__(self):\r\n        self.ciudades = {}\r\n        self.distancias = {}  # Diccionario para almacenar las distancias calculadas\r\n        self.nombre = None\r\n        self.comentario = None\r\n        self.tipo = None\r\n        self.tam = None\r\n        self.edge_type = None\r\n\r\n    def nueva_ciudad(self, nuevaciudad):\r\n        self.ciudades[nuevaciudad.id] = nuevaciudad\r\n\r\n    def calculadistancia(self, C1, C2):\r\n        x1, y1 = C1.x, C1.y\r\n        x2, y2 = C2.x, C2.y\r\n        return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\r\n\r\n    def obtener_distancia(self, id1, id2):\r\n        if id1 == id2:\r\n            return 0  # La distancia a sí misma siempre es 0\r\n        # Ordenamos los IDs para mantener simetría y evitar cálculos duplicados\r\n        id_menor, id_mayor = sorted([id1, id2])\r\n        if (id_menor, id_mayor) not in self.distancias:\r\n            # Calculamos la distancia solo si no está en el diccionario\r\n            distancia = self.calculadistancia(self.ciudades[id_menor], self.ciudades[id_mayor])\r\n            self.distancias[(id_menor, id_mayor)] = distancia\r\n        return self.distancias[(id_menor, id_mayor)]\r\n\r\n    def generar_matriz_distancias(self):\r\n        numCiudades = len(self.ciudades)\r\n        # Crear una matriz de ceros utilizando numpy para mayor eficiencia\r\n        self.matriz_distancias = np.zeros((numCiudades, numCiudades))\r\n\r\n        for i, ciudad1 in enumerate(self.ciudades.values()):\r\n            for j, ciudad2 in enumerate(self.ciudades.values()):\r\n                self.matriz_distancias[i][j] = self.obtener_distancia(ciudad1.id, ciudad2.id)\r\n        return self.matriz_distancias\r\n\r\n\r\n    ##\r\n    #  \\brief Muestra una submatriz de distancias entre las ciudades.\r\n    #\r\n    #  \\param filas Lista de índices de filas a mostrar. Si es None, se muestran todas las filas.\r\n    #  \\param columnas Lista de índices de columnas a mostrar. Si es None, se muestran todas las columnas.\r\n    #\r\n    #  Si no se especifican filas o columnas, se muestra la matriz completa de distancias.\r\n    #\r\n    def mostrar_matriz(self, filas=None, columnas=None):\r\n        # Usar la lista completa si `filas` o `columnas` no se especifican\r\n        # shape es un atributo del array que devuelve el tamaño del mismo\r\n        filas = filas if filas is not None else range(self.matriz_distancias.shape[0])\r\n        columnas = columnas if columnas is not None else range(self.matriz_distancias.shape[1])\r\n\r\n        # Extraer y mostrar la submatriz\r\n        submatriz = self.matriz_distancias[np.ix_(filas, columnas)]\r\n        print(submatriz)\r\n\r\n    def greedy(self):\r\n        nc=self.tam\r\n        suma=0\r\n        marcaje=[0]*nc\r\n        proxciudad=0\r\n        marcaje[0]=1\r\n        for _ in range(nc-1):\r\n            mejor = float('inf')\r\n            for j in range(nc):\r\n                if(self.matriz_distancias[proxciudad][j]<mejor and marcaje[j]==0):\r\n                    mejor=self.matriz_distancias[proxciudad][j]\r\n                    siguiente=j\r\n            suma+=mejor\r\n            proxciudad=siguiente\r\n            marcaje[proxciudad]=1\r\n        suma+=self.matriz_distancias[proxciudad][0]\r\n        return suma\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Mapa.py b/Mapa.py
--- a/Mapa.py	(revision 45168e63321533ecd414004741a6b821452e5c38)
+++ b/Mapa.py	(date 1726655892947)
@@ -14,7 +14,7 @@
         self.edge_type = None
 
     def nueva_ciudad(self, nuevaciudad):
-        self.ciudades[nuevaciudad.id] = nuevaciudad
+        self.ciudades[ç.id] = nuevaciudad
 
     def calculadistancia(self, C1, C2):
         x1, y1 = C1.x, C1.y
